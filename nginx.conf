# Start the processes under the www-data user and group
user www-data www-data;

# Create one worker process per CPU core
worker_processes auto;

# Set the maximum number of open files each worker can open to double
# the number of worker connections, as each worker opens at least two
# files per incoming connection (incoming socket, upstream socket, 
# or file on disk)
worker_rlimit_nofile 16384;

error_log /srv/lancache/logs/nginx-error.log;

# Configure how connections are processed
events {

    # Allow large number of connections to clients and upstreams
    worker_connections 8192;

    # Allow each worker process to accept all incoming connections
    multi_accept on;

    # Monitor multiple file descriptors to see if I/O is possible on any
    # https://en.wikipedia.org/wiki/Epoll
    use epoll;
}

# Configure HTTP servers
http {
    include mime.types;

    # Use sendfile system call to read file data from the hard disk kernel buffer
    # and write it directly to the socket engine kernel buffer, instead of context
    # switching to user mode, reading the data from the hard disk kernel buffer
    # into the user buffer, and from the user buffer to the socket engine kernel
    # buffer. https://www.sobyte.net/post/2022-08/nginx-send/
    sendfile on;

    # To prevent a fast connection from blocking other connections, limit the 
    # amount of data one worker process can transfer in a single
    # sendfile call before switching to another worker 
    sendfile_max_chunk 512k;

    # Pre-load data for sendfile
    aio on;

    # Set TCP_CORK socket option to delay sending packets until they match the
    # maximum segment size (MSS) which is typically 1460 bytes
    # https://www.netguru.com/blog/nginx-tutorial-performance
    tcp_nopush on;

    # Set TCP_NODELAY socket option to disable waiting for acknowledgements
    # from the receiver before sending packets smaller than the MSS
    tcp_nodelay on;

    # Close idle connections from clients after 65 seconds
    keepalive_timeout 65;

    # Enable response compression
    gzip on;

    # Increase the size of the hash table for server names, as we define
    # a server name for each domain we are proxying (and possibly caching) 
    server_names_hash_max_size 1024;

    # Resolve upstream server FQDNs to IPs
    resolver 8.8.8.8 ipv6=off;

    # Cache storage location configuration
    proxy_cache_path /srv/lancache/data
        levels=2:2
        keys_zone=lancache:500m
        inactive=1y
        max_size=3000g
        loader_files=1000
        loader_sleep=50ms
        loader_threshold=300ms;

    # Get the custom log format for detailed access logging of HTTP requests
    include access-log-formats/http/detailed.conf;

    # Server configuration for requests that don't match any of the caches
    server {
        listen *:80 default_server;

        server_name lancache-fallback;

        # Log the requests for analysis and troubleshooting
        access_log /srv/lancache/logs/fallback-access.log
            http-detailed
            buffer=128k
            flush=5s;

        error_log /srv/lancache/logs/fallback-error.log;

        # Proxy requests to the requested upstream, and don't cache the response
        location / {
            include includes/proxy.conf;
        }
    }

    # Server configurations for each cached service
    include caches-enabled/*.conf;

}

# Configure TCP stream servers
stream {

    error_log /srv/lancache/logs/stream-error.log;

    # Get the custom log format for detailed access logging of stream requests
    include access-log-formats/stream/detailed.conf;

    # Listen for incoming HTTPS requests
    server {
        listen *:443;

        # Enable extracting the requested SSL protocol, server name and
        # applicaiton layer protocol negotiation (ALPN) protocols
        ssl_preread on;

        # Resolve upstream server FQDNs to IPs
        resolver 8.8.8.8 ipv6=off;

        # Use server name indication (SNI) provided in $ssl_preread_server_name
        # to proxy incoming requests to the upstream
        proxy_pass $ssl_preread_server_name:443;

        access_log /srv/lancache/logs/https-access.log
            stream-detailed
            buffer=128k
            flush=5s;

        error_log /srv/lancache/logs/https-error.log;
    }
}
