server {
    listen *:80;

    access_log /srv/lancache/logs/blizzard-access.log
        http-detailed
        buffer=128k
        flush=5s;

    error_log /srv/lancache/logs/blizzard-error.log;

    # Set first server name, used in cache key
    server_name lancache-blizzard;

    # Set server name for domains Nginx should intercept
    include domains/blizzard.conf;

    # For all requests, proxy requests to upstream and cache
    location / {

        include includes/proxy-and-cache.conf;

        proxy_cache lancache;

        # Battle.net downloader performs many range requests on large files
        # and the range requests may be different each time a game is 
        # downloaded which would cause Nginx to cache many duplicate files of
        # different sizes. Using slice causes Nginx to request and cache 
        # consistently-sized 1MB chunks of the files from Battle.net and serve
        # the ranges requested by the Battle.net downloader.
        slice 1m;

        # Set the Range request header that is sent to the upstream server to
        # the range request that covers the request from the client
        proxy_set_header Range $slice_range;

        # Set the cache key to the (first) server name, the requested URI
        # without the query string, and the slice range
        proxy_cache_key "$server_name$uri$slice_range";

        # Honour "Pragma:no-cache" (HTTP/1.0) and "Cache-Control:no-cache"(HTTP/1.1)
        # request from Battle.net downloader, which will mean if a cached file
        # is found to be corrupt, the Battle.net downloader will request
        # a fresh copy from upstream, which Nginx will cache
        proxy_cache_bypass $http_pragma;
        proxy_cache_bypass $http_cache_control;

        # The various CDNs that Blizzard use each employ a different ETag scheme
        # resulting in different ETags for the same piece of (non-modified) content
        # As a result Nginx's cached ETag may not match the client's requested ETag
        # even if the content has not been modified, which would cause the client
        # to unnecessarily re-request the content.
        # To avoid this, don't pass the ETag header to clients
        proxy_hide_header ETag;
    }
}
